/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gtfutsal;

import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bacha
 */
public class NewJFrame extends javax.swing.JFrame {
    int tableIndexNo=0;  
    ArrayList<String> players = new ArrayList();
    ArrayList<String> goalKeepers = new ArrayList();
    ArrayList<String> sideA = new ArrayList();
    ArrayList<String> sideB = new ArrayList();
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        GTFutsal futsal= new GTFutsal();
        String date=futsal.getDate();
        dateLabel.setText(date);
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        playerNameField = new javax.swing.JTextField();
        addPlayerButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        allPlayersSheet = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        teamBSheet = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        teamASheet = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        generateSquadSheetButton = new javax.swing.JButton();
        deleteSelectedButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        isKeeper = new javax.swing.JCheckBox();
        resetTeams = new javax.swing.JButton();
        clearPlayersButton = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("GurkhaTech Futsal ");

        dateLabel.setText("Date");

        jLabel2.setText("Enter Player Name");

        addPlayerButton.setText("Add player");
        addPlayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlayerButtonActionPerformed(evt);
            }
        });

        allPlayersSheet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "#", "Player Name", "Position"
            }
        ));
        jScrollPane1.setViewportView(allPlayersSheet);

        teamBSheet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Player Name"
            }
        ));
        jScrollPane2.setViewportView(teamBSheet);

        teamASheet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Player Name"
            }
        ));
        jScrollPane3.setViewportView(teamASheet);

        jLabel3.setText("Team A");

        jLabel4.setText("Team B");

        generateSquadSheetButton.setText("Generate Squad");
        generateSquadSheetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateSquadSheetButtonActionPerformed(evt);
            }
        });

        deleteSelectedButton.setText("Delete");
        deleteSelectedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSelectedButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Select Position");

        isKeeper.setText("Goal Keeper");

        resetTeams.setText("Regenerate");
        resetTeams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetTeamsActionPerformed(evt);
            }
        });

        clearPlayersButton.setText("Clear Players");
        clearPlayersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearPlayersButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(isKeeper)
                        .addGap(80, 80, 80)
                        .addComponent(addPlayerButton))
                    .addComponent(playerNameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(91, 91, 91)
                .addComponent(dateLabel)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(52, 52, 52))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(deleteSelectedButton)
                                .addGap(7, 7, 7)
                                .addComponent(clearPlayersButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(generateSquadSheetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetTeams, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateLabel))
                .addGap(1, 1, 1)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(playerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addPlayerButton)
                    .addComponent(jLabel5)
                    .addComponent(isKeeper))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetTeams)
                    .addComponent(generateSquadSheetButton)
                    .addComponent(clearPlayersButton)
                    .addComponent(deleteSelectedButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addPlayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlayerButtonActionPerformed
        
        try{
                       
            String playerName= playerNameField.getText().trim();
            GTFutsal futsal= new GTFutsal();         
            
            
            int keepers=0;
            if(!playerName.equals("")){
                
                for(int i=0; i<allPlayersSheet.getRowCount(); i++){
                    
                    
                    String keeper=(String)allPlayersSheet.getValueAt(i, 2);
                    if ("Keeper".equals(keeper)){
                        keepers++;
                    }
                    
                }
                
                if(keepers>=2 && isKeeper.isSelected()){
                    JOptionPane.showMessageDialog(this, "There are 2 keepers already. Can't add player. Please Uncheck the keeper box.", "Error Message", JOptionPane.ERROR_MESSAGE);
                }
                else{
                
                    tableIndexNo++;
                
                
                    String tableIndexNumber= (String.valueOf(tableIndexNo));
                    futsal.addPlayer(tableIndexNumber);
                    futsal.addPlayer(playerName);
                    if(isKeeper.isSelected()){
                        futsal.addPlayer("Keeper");
                        isKeeper.setSelected(false);
                    }
                    //get row and column count
                    int row= allPlayersSheet.getRowCount();
                    int col= allPlayersSheet.getColumnCount();
                    int nextRow= 0;
                    int nextCol=0;
                    boolean flag= false;

                    do{
                        String s=(String)allPlayersSheet.getValueAt(nextRow, nextCol);
                        //if 1st element of table not empty
                        if(s!=null && s.length()!=0){
                            //go to next row
                            nextRow++;
                        }
                        else{
                            //if empty row found, point flag here
                            flag=true;
                        }
                    //loop till flag is true and the next row is less than total row
                    }while(!flag && nextRow<row);

                    try
                    {   
                        //loop for each elements in array that has input dish menu elements
                        for(int i=0;i<futsal.getPlayer().size();i++){
                            //set values to row and columns from the arraylist all corresponding to the value of i
                            allPlayersSheet.setValueAt(futsal.getPlayer().get(i), nextRow, i);//(obj, row,col)
                        }
                        JOptionPane.showMessageDialog(this, "Player Added.", "Success Message", JOptionPane.INFORMATION_MESSAGE);
                        playerNameField.setText("");
                        
                    }
                    //if table is full
                    catch(Exception e){
                        JOptionPane.showMessageDialog(this, "Table is full, no more rows can be added.", "Error Message", JOptionPane.ERROR_MESSAGE);
                    }
                }           
                
                
            }
            //if any of the fields are left empty
            else{
                JOptionPane.showMessageDialog(this, "This field is required.", "Error Message", JOptionPane.ERROR_MESSAGE);

            }           
            
        }
        //if the entered price is lyanglyang
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "Unexpected Exception, please try again.", "Error Message", JOptionPane.ERROR_MESSAGE);

        }
        
    }//GEN-LAST:event_addPlayerButtonActionPerformed

    private void generateSquadSheetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateSquadSheetButtonActionPerformed
        // TODO add your handling code here:
        
        
        for (int i=0; i<allPlayersSheet.getRowCount(); i++){
            String playerName = (String)allPlayersSheet.getValueAt(i, 1);
            String keeper= (String)allPlayersSheet.getValueAt(i,2);
            
            if(!"Keeper".equals(keeper)){
                players.add(playerName);
            }else{
                goalKeepers.add(playerName);
            }    
        }
        this.shufflePlayers();
        this.displaySides();
                     
    }//GEN-LAST:event_generateSquadSheetButtonActionPerformed

    private void resetTeamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetTeamsActionPerformed
        // TODO add your handling code here:
        for (int i=0; i<sideA.size();i++){
            teamASheet.setValueAt(null, i, 0);
        }
        for (int i=0; i<sideB.size();i++){
            teamBSheet.setValueAt(null, i, 0);
        }
        
        sideA.clear();
        sideB.clear();
        
        System.out.println("---------------");
        System.out.println(sideA);
        System.out.println(sideB);
        System.out.println("---------------");
        shufflePlayers();
        displaySides();
        
    }//GEN-LAST:event_resetTeamsActionPerformed

    private void deleteSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedButtonActionPerformed
        // TODO add your handling code here:
        try{

            //check if row is selected
            if (allPlayersSheet.getSelectedRow() != -1) {
                // remove selected row from the model
                ((DefaultTableModel)allPlayersSheet.getModel()).removeRow(allPlayersSheet.getSelectedRow());
                JOptionPane.showMessageDialog(this, "Selected row from table deleted.", "Warning Message", JOptionPane.WARNING_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(this, "No rows selected/found to delete.", "Error Message", JOptionPane.ERROR_MESSAGE);
            }

        }

        //catch any unhandled exception
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "Unhandled exception thrown.", "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteSelectedButtonActionPerformed

    private void clearPlayersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearPlayersButtonActionPerformed
        // TODO add your handling code here:
        for (int i=0; i<allPlayersSheet.getRowCount();i++){
             for (int j=0; j<allPlayersSheet.getColumnCount();j++){
                allPlayersSheet.setValueAt(null, i, j);               
             }
        }
    }//GEN-LAST:event_clearPlayersButtonActionPerformed

    
    public void shufflePlayers(){
    //TODO get the non goal keeper players
        Collections.shuffle(players);        
        for(int i=0;i<players.size();i++){
            if(i%2==0){
                sideA.add(players.get(i));
            }else{
                sideB.add(players.get(i));
            }
        }
        
        //TODO get goalKeepers
        Collections.shuffle(goalKeepers);
        for(int i=0;i<goalKeepers.size();i++){
            if(i%2==0){
                sideA.add(goalKeepers.get(i));
            }else{
                sideB.add(goalKeepers.get(i));
            }
        }
        System.out.println(players);
        System.out.println(goalKeepers);
        System.out.println(sideA);
        System.out.println(sideB);
        System.out.println("---------------");
        
    }
    
    public void displaySides(){
        for (int i=0; i<sideA.size();i++){
            teamASheet.setValueAt(sideA.get(i), i, 0);
        }
        for (int i=0; i<sideB.size();i++){
            teamBSheet.setValueAt(sideB.get(i), i, 0);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
              
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPlayerButton;
    private javax.swing.JTable allPlayersSheet;
    private javax.swing.JButton clearPlayersButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton deleteSelectedButton;
    private javax.swing.JButton generateSquadSheetButton;
    private javax.swing.JCheckBox isKeeper;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField playerNameField;
    private javax.swing.JButton resetTeams;
    private javax.swing.JTable teamASheet;
    private javax.swing.JTable teamBSheet;
    // End of variables declaration//GEN-END:variables
}
